"""
Servi√ßos para gerenciamento de hist√≥rico
"""
from datetime import datetime, timedelta
import pytz
from config import active_config
from models import Historico

# === Ver hist√≥rico completo ===
def ver_historico(limit=50):
    """Lista o hist√≥rico de opera√ß√µes"""
    registros = Historico.listar_recentes(limit)
    
    if not registros:
        return "üì≠ Nenhum registro no hist√≥rico."
    
    linhas = ["üìä HIST√ìRICO DE OPERA√á√ïES:"]
    for h in registros:
        data_formatada = h.data_operacao.strftime("%d/%m/%Y %H:%M") if h.data_operacao else "N/A"
        placa_info = f" - {h.placa_veiculo}" if h.placa_veiculo else ""
        funcionario_info = f" - {h.funcionario_nome}" if h.funcionario_nome else ""
        
        linhas.append(
            f"üîπ {data_formatada}: {h.tipo_operacao.upper()}{placa_info}{funcionario_info}"
        )
    
    return "\n".join(linhas)

# === Filtrar hist√≥rico por matr√≠cula ===
def filtrar_historico_por_matricula(matricula, limit=50):
    """Filtra hist√≥rico por matr√≠cula de funcion√°rio"""
    registros = Historico.listar_por_funcionario(matricula)[:limit]
    
    if not registros:
        return f"üì≠ Nenhum registro encontrado para a matr√≠cula {matricula}."
    
    linhas = [f"üìä HIST√ìRICO DA MATR√çCULA {matricula}:"]
    for h in registros:
        data_formatada = h.data_operacao.strftime("%d/%m/%Y %H:%M") if h.data_operacao else "N/A"
        placa_info = f" - {h.placa_veiculo}" if h.placa_veiculo else ""
        
        linhas.append(
            f"üîπ {data_formatada}: {h.tipo_operacao.upper()}{placa_info}"
        )
    
    return "\n".join(linhas)

# === Filtrar hist√≥rico por placa ===
def filtrar_historico_por_placa(placa, limit=20):
    """Filtra hist√≥rico por placa de ve√≠culo"""
    registros = Historico.listar_por_placa(placa)[:limit]
    
    if not registros:
        return f"üì≠ Nenhum registro encontrado para a placa {placa}."
    
    linhas = [f"üìä HIST√ìRICO DA PLACA {placa}:"]
    for h in registros:
        data_formatada = h.data_operacao.strftime("%d/%m/%Y %H:%M") if h.data_operacao else "N/A"
        funcionario_info = f" - {h.funcionario_nome}" if h.funcionario_nome else ""
        tempo_info = f" ({h.tempo_permanencia} min)" if h.tempo_permanencia else ""
        
        linhas.append(
            f"üîπ {data_formatada}: {h.tipo_operacao.upper()}{funcionario_info}{tempo_info}"
        )
    
    return "\n".join(linhas)

# === Relat√≥rio de opera√ß√µes por per√≠odo ===
def relatorio_por_periodo(data_inicio, data_fim):
    """Gera relat√≥rio de opera√ß√µes por per√≠odo"""
    try:
        if isinstance(data_inicio, str):
            data_inicio = datetime.fromisoformat(data_inicio)
        if isinstance(data_fim, str):
            data_fim = datetime.fromisoformat(data_fim)
        
        registros = Historico.listar_por_periodo(data_inicio, data_fim)
        
        if not registros:
            return f"üì≠ Nenhuma opera√ß√£o encontrada entre {data_inicio.strftime('%d/%m/%Y')} e {data_fim.strftime('%d/%m/%Y')}."
        
        # Agrupar por tipo de opera√ß√£o
        operacoes_por_tipo = {}
        for h in registros:
            tipo = h.tipo_operacao
            if tipo not in operacoes_por_tipo:
                operacoes_por_tipo[tipo] = []
            operacoes_por_tipo[tipo].append(h)
        
        linhas = [
            f"üìä RELAT√ìRIO DE OPERA√á√ïES",
            f"üìÖ Per√≠odo: {data_inicio.strftime('%d/%m/%Y')} a {data_fim.strftime('%d/%m/%Y')}",
            f"üìà Total de opera√ß√µes: {len(registros)}",
            ""
        ]
        
        for tipo, operacoes in operacoes_por_tipo.items():
            linhas.append(f"üîπ {tipo.upper()}: {len(operacoes)} opera√ß√µes")
        
        return "\n".join(linhas)
        
    except Exception as e:
        return f"‚ùå Erro ao gerar relat√≥rio: {e}"

# === Estat√≠sticas do hist√≥rico ===
def obter_estatisticas_historico():
    """Retorna estat√≠sticas do hist√≥rico"""
    try:
        # Contar opera√ß√µes por tipo
        operacoes_por_tipo = Historico.contar_operacoes_por_tipo()
        
        # Opera√ß√µes dos √∫ltimos 7 dias
        uma_semana_atras = datetime.now(pytz.timezone(active_config.TIMEZONE)) - timedelta(days=7)
        operacoes_recentes = Historico.listar_por_periodo(
            uma_semana_atras, 
            datetime.now(pytz.timezone(active_config.TIMEZONE))
        )
        
        stats = {
            'total_operacoes': sum(count for _, count in operacoes_por_tipo),
            'operacoes_por_tipo': dict(operacoes_por_tipo),
            'operacoes_ultima_semana': len(operacoes_recentes)
        }
        
        return stats
        
    except Exception as e:
        return {'erro': str(e)}

# === Limpar hist√≥rico antigo ===
def limpar_historico_antigo(dias_para_manter=90):
    """Remove registros de hist√≥rico mais antigos que o n√∫mero especificado de dias"""
    try:
        data_limite = datetime.now(pytz.timezone(active_config.TIMEZONE)) - timedelta(days=dias_para_manter)
        
        # Contar registros que ser√£o removidos
        registros_antigos = Historico.query.filter(Historico.data_operacao < data_limite).all()
        total_removidos = len(registros_antigos)
        
        # Remover registros
        for registro in registros_antigos:
            registro.deletar()
        
        return f"‚úÖ {total_removidos} registros antigos removidos (anteriores a {data_limite.strftime('%d/%m/%Y')})."
        
    except Exception as e:
        return f"‚ùå Erro ao limpar hist√≥rico: {e}" 