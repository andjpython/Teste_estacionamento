"""
Configura√ß√µes centralizadas do Sistema de Estacionamento Rotativo
"""
import os
from pathlib import Path

# === CONFIGURA√á√ïES GERAIS ===
class Config:
    # Diret√≥rios
    BASE_DIR = Path(__file__).parent
    DADOS_DIR = BASE_DIR / "dados"
    
    # Arquivos de dados
    VEICULOS_PATH = DADOS_DIR / "veiculos.json"
    VAGAS_PATH = DADOS_DIR / "vagas.json"
    HISTORICO_PATH = DADOS_DIR / "historico.json"
    FUNCIONARIOS_PATH = DADOS_DIR / "funcionarios.json"
    
    # === REGRAS DE NEG√ìCIO ===
    # Limite de tempo em horas (10 minutos)
    LIMITE_HORAS_ESTACIONAMENTO = 0.16667
    
    # Tipos de vagas dispon√≠veis
    TIPOS_VAGA = ["comum", "visitante"]
    
    # Quantidade de vagas por tipo
    VAGAS_COMUNS = 20
    VAGAS_VISITANTES = 10
    
    # === CONFIGURA√á√ïES DE TIMER ===
    # Intervalos em milissegundos
    INTERVALO_TIMER = 1000  # 1 segundo
    INTERVALO_AUTO_UPDATE = 30000  # 30 segundos
    
    # Porcentagens para alertas visuais
    PORCENTAGEM_WARNING = 25  # Amarelo quando restam 25%
    PORCENTAGEM_CRITICAL = 10  # Vermelho quando restam 10%
    
    # === SEGURAN√áA ===
    # Senha do supervisor (vari√°vel de ambiente ou padr√£o)
    SENHA_SUPERVISOR = os.environ.get("SENHA_SUPERVISOR", "290479")
    
    # === TIMEZONE ===
    TIMEZONE = "America/Sao_Paulo"
    
    # === LOGGING ===
    LOG_LEVEL = "INFO"
    LOG_FORMAT = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    
    # === MENSAGENS ===
    class Mensagens:
        # Sucessos
        VEICULO_CADASTRADO = "‚úÖ Ve√≠culo {placa} cadastrado como {tipo}."
        VEICULO_ESTACIONADO = "‚úÖ Ve√≠culo {placa} estacionado na vaga {numero} ({tipo})."
        VEICULO_LIBERADO = "‚úÖ Ve√≠culo {placa} saiu da vaga {numero}. Tempo: {tempo} min."
        FUNCIONARIO_CADASTRADO = "‚úÖ Funcion√°rio {nome} cadastrado com matr√≠cula {matricula}."
        LOGIN_REALIZADO = "üîì Funcion√°rio {nome} entrou."
        LOGOUT_REALIZADO = "üîí Funcion√°rio {nome} saiu."
        
        # Erros
        VEICULO_JA_CADASTRADO = "‚ùå Ve√≠culo j√° cadastrado com essa placa."
        VEICULO_NAO_CADASTRADO = "‚ùå Ve√≠culo n√£o cadastrado."
        VEICULO_JA_ESTACIONADO = "‚ö†Ô∏è Este ve√≠culo j√° est√° estacionado."
        PLACA_INVALIDA = "‚ùå Placa inv√°lida. Use formato ABC1234 ou ABC1D23."
        CPF_INVALIDO = "‚ùå CPF inv√°lido. Verifique os d√≠gitos."
        NOME_OBRIGATORIO = "‚ùå Nome do propriet√°rio √© obrigat√≥rio."
        VAGA_NAO_DISPONIVEL = "üö´ Nenhuma vaga dispon√≠vel para tipo {tipo}."
        MATRICULA_INVALIDA = "‚ùå Matr√≠cula inv√°lida. Deve conter 4 d√≠gitos."
        FUNCIONARIO_NAO_ENCONTRADO = "‚ùå Funcion√°rio n√£o encontrado."
        SENHA_INCORRETA = "‚ùå Acesso negado. Senha do supervisor incorreta!"
        DADOS_NAO_FORNECIDOS = "‚ùå Dados n√£o fornecidos!"
        ERRO_INTERNO = "‚ùå Erro interno do servidor!"
        
        # Informativos
        NENHUM_VEICULO_CADASTRADO = "üì≠ Nenhum ve√≠culo cadastrado."
        NENHUMA_VAGA_CADASTRADA = "üì≠ Nenhuma vaga cadastrada."
        NENHUM_FUNCIONARIO_CADASTRADO = "üì≠ Nenhum funcion√°rio cadastrado."
        TEMPO_ESGOTADO = "üí• TEMPO ESGOTADO"
        CARREGANDO = "‚è≥ Carregando..."

# === CONFIGURA√á√ïES DE DESENVOLVIMENTO ===
class DevelopmentConfig(Config):
    DEBUG = True
    LOG_LEVEL = "DEBUG"

# === CONFIGURA√á√ïES DE PRODU√á√ÉO ===
class ProductionConfig(Config):
    DEBUG = False
    LOG_LEVEL = "WARNING"
    
# === Configura√ß√£o ativa ===
# Por padr√£o usa desenvolvimento, mas pode ser alterado via vari√°vel de ambiente
config_name = os.environ.get('FLASK_ENV', 'development')
if config_name == 'production':
    active_config = ProductionConfig()
else:
    active_config = DevelopmentConfig() 